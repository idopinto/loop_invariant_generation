[L30]              int N;
       VAL         [N=0]
[L33]              N = __VERIFIER_nondet_int()
[L34]  COND FALSE  !(N <= 0)
[L37]  CALL        assume_abort_if_not(N <= 2147483647 / sizeof(int))
[L15]  COND FALSE  !(!cond)
       VAL         [N=3]
[L37]  RET         assume_abort_if_not(N <= 2147483647 / sizeof(int))
[L39]              int i;
[L40]              long long *a = malloc(sizeof(long long) * N);
[L41]              long long *b = malloc(sizeof(long long) * N);
[L42]              long long *c = malloc(sizeof(long long) * N);
[L44]              a[0] = 6
[L45]              b[0] = 1
[L46]              c[0] = 0
[L48]              i = 1
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=1]
[L48]  COND TRUE   i < N
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=1]
[L49]  EXPR        a[i - 1]
[L49]              a[i] = a[i - 1] + 6
[L48]              i++
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=2]
[L48]  COND TRUE   i < N
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=2]
[L49]  EXPR        a[i - 1]
[L49]              a[i] = a[i - 1] + 6
[L48]              i++
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=3]
[L48]  COND FALSE  !(i < N)
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}]
[L52]              i = 1
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=1]
[L52]  COND TRUE   i < N
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=1]
[L53]  EXPR        b[i - 1]
[L53]  EXPR        a[i - 1]
[L53]              b[i] = b[i - 1] + a[i - 1]
[L52]              i++
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=2]
[L52]  COND TRUE   i < N
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=2]
[L53]  EXPR        b[i - 1]
[L53]  EXPR        a[i - 1]
[L53]              b[i] = b[i - 1] + a[i - 1]
[L52]              i++
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=3]
[L52]  COND FALSE  !(i < N)
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}]
[L56]              i = 1
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=1]
[L56]  COND TRUE   i < N
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=1]
[L57]  EXPR        c[i - 1]
[L57]  EXPR        b[i - 1]
[L57]              c[i] = c[i - 1] + b[i - 1]
[L56]              i++
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=2]
[L56]  COND TRUE   i < N
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=2]
[L57]  EXPR        c[i - 1]
[L57]  EXPR        b[i - 1]
[L57]              c[i] = c[i - 1] + b[i - 1]
[L56]              i++
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=3]
[L56]  COND FALSE  !(i < N)
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}]
[L60]              i = 0
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=0]
[L60]  COND TRUE   i < N
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=0]
[L61]  EXPR        c[i]
[L61]  CALL        __VERIFIER_assert(c[i] == i * i)
[L20]  COND FALSE  !(!(cond))
       VAL         [N=3]
[L61]  RET         __VERIFIER_assert(c[i] == i * i)
[L60]              i++
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=1]
[L60]  COND TRUE   i < N
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=1]
[L61]  EXPR        c[i]
[L61]  CALL        __VERIFIER_assert(c[i] == i * i)
[L20]  COND FALSE  !(!(cond))
       VAL         [N=3]
[L61]  RET         __VERIFIER_assert(c[i] == i * i)
[L60]              i++
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=2]
[L60]  COND TRUE   i < N
       VAL         [N=3, a={-3:0}, b={-1:0}, c={-2:0}, i=2]
[L61]  EXPR        c[i]
[L61]  CALL        __VERIFIER_assert(c[i] == i * i)
[L20]  COND TRUE   !(cond)
       VAL         [N=3]
[L22]              reach_error()
       VAL         [N=3]

